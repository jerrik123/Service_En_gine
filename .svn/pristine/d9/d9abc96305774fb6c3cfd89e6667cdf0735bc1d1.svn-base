package com.mangocity.mbr.controller.mbr;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.mangocity.ce.bean.EngineBean;
import com.mangocity.ce.exception.ExceptionAbstract;
import com.mangocity.ce.util.AssertUtils;
import com.mangocity.ce.util.CommonUtils;
import com.mangocity.ce.util.RedisUtils;
import com.mangocity.mbr.book.ErrorCode;
import com.mangocity.mbr.util.ErrorUtils;
import com.mangocity.mbr.util.ServerCall;

/**
 * @ClassName: DeliverAddressService
 * @Description: (会员常用地址服务)
 * @author longshu.chen
 * @date 2016年3月3日 下午3:34:22
 *
 */
public class DeliverAddressService {

	private static final Logger log = Logger
			.getLogger(DeliverAddressService.class);

	/**
	 * 根据会员id分页查询
	 * 
	 * @throws ExceptionAbstract
	 */
	public EngineBean queryAddressWithPage(EngineBean pb)
			throws ExceptionAbstract {
		log.info("DeliverAddressService queryAddressWithPage begin()...");
		AssertUtils.assertNull(pb, "EngineBean can't be null.");
		Long mbrId = CommonUtils
				.objectToLong((String) pb.getHead("mbrId"), -1L);
		Long pageNo = CommonUtils.objectToLong((String) pb.getHead("pageNo"),
				-1L);
		Long pageSize = CommonUtils.objectToLong(
				(String) pb.getHead("pageSize"), -1L);
		String userId = (String) pb.getHead("userId");
		String aToken = (String) pb.getHead("aToken");
		if (-1L == mbrId) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"mbrId不能为空或非法数字");
		}
		if (-1L == pageNo) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"pageNo不能为空或非法数字");
		}
		if (-1L == pageSize) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"pageSize不能为空或非法数字");
		}
		if (pageNo <= 0) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"pageNo必须是正整数");
		}
		if (pageSize <= 0) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"pageSize必须是正整数");
		}
		if (CommonUtils.isBlank(userId)) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"userId不能为空");
		}
		if (CommonUtils.isBlank(userId)) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"userId不能为空");
		}
		// 1.判断aToken是否存在 false:返回lToken错误
		if (!RedisUtils.exists(aToken)) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"缓存中不存在该aToken");
		}
		// 2.根据aToken获取缓存中的value 判断和userId是否相等,如果不等,则返回错误
		if (!userId.equals(RedisUtils.get(aToken))) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"aToken和userId不匹配");
		}
		EngineBean addressBean = ServerCall.call(pb);
		int pageNum = queryAddressCount(pb);
		Map<String, Object> resultMap = new HashMap<String, Object>();
		resultMap.put("addressList", addressBean.getBody("result"));
		resultMap.put("pageNo", pageNum);
		addressBean.getBodyMap().put("result", resultMap);
		return addressBean;
	}

	/**
	 * 根据会员id和每页显示条数获取总页数
	 */
	public int queryAddressCount(EngineBean pb) throws ExceptionAbstract {
		log.info("DeliverAddressService queryAddressCount begin()...");
		AssertUtils.assertNull(pb, "EngineBean can't be null.");
		Map<String, Object> headMap = pb.getHeadMap();
		log.info("headMap: " + headMap);
		pb.setCommand("queryAddressCount");
		EngineBean addressSize = ServerCall.call(pb);
 		int count = Integer.parseInt(String.valueOf( addressSize.getBody("result")));
		int pageSize = Integer.parseInt( (String) pb.getHead("pageSize"));
		int pageNum = 0;
		if (count % pageSize == 0) {
			pageNum = count / pageSize;
		} else {
			pageNum = count / pageSize + 1;
		}
		return pageNum;
	}

	/**
	 * 插入常用地址信息
	 * 
	 * @param deliveryAddress
	 * @return
	 */
	public EngineBean createAddress(EngineBean pb) throws ExceptionAbstract {
		log.info("DeliverAddressService createAddress begin()...");
		AssertUtils.assertNull(pb, "EngineBean can't be null.");
		Long mbrId = CommonUtils
				.objectToLong((String) pb.getHead("mbrId"), -1L);
		String receiveName = (String) pb.getHead("receiveName");
		String province = (String) pb.getHead("province");
		String city = (String) pb.getHead("city");
		String district = (String) pb.getHead("district");
		String detailAddr = (String) pb.getHead("detailAddr");
		// String postalCode=(String)pb.getHead("postalCode");
		// String status=(String)pb.getHead("status");
		String defaultAddr=(String)pb.getHead("defaultAddr");
		String createBy = (String) pb.getHead("createBy");
		String updateBy=(String)pb.getHead("updateBy");
		String mobileNo = (String) pb.getHead("mobileNo");
		String linkPhoneNo = (String) pb.getHead("linkPhoneNo");
		// String addrType=(String)pb.getHead("addrType");
		String aToken = (String) pb.getHead("aToken");
		if (-1L == mbrId) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"mbrId不能为空或非法数字");
		}
		if (CommonUtils.isBlank(receiveName)) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"receiveName不能为空");
		}
		if (CommonUtils.isBlank(province)) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"province不能为空");
		}
		if (CommonUtils.isBlank(city)) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"city不能为空");
		}
		if (CommonUtils.isBlank(district)) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"district不能为空");
		}
		if (CommonUtils.isBlank(detailAddr)) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"detailAddr不能为空");
		}
		if (CommonUtils.isBlank(defaultAddr)) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"defaultAddr不能为空");
		}
		if (CommonUtils.isBlank(mobileNo) && CommonUtils.isBlank(linkPhoneNo)) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"mobileNo和linkPhoneNo不能同时为空");
		}
		if (CommonUtils.isBlank(aToken)) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"aToken不能为空");
		}
		if (CommonUtils.isBlank(createBy)) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"createBy不能为空");
		}
		if (CommonUtils.isBlank(updateBy)) {
			pb.setHead("updateBy", createBy);
		}
		
		// 1.判断aToken是否存在 false:返回lToken错误
		if (!RedisUtils.exists(aToken)) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"缓存中不存在该aToken");
		}
		// 2.根据aToken获取缓存中的value 判断和userId是否相等,如果不等,则返回错误
		if (!createBy.equals(RedisUtils.get(aToken))) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"aToken和createBy不匹配");
		}
		
		//如果添加地址的时候，需要设置当前地址为默认地址，则需要取消原来的默认地址
		if(defaultAddr.equals("1")){
			EngineBean cancleDefaulAddressEb=new EngineBean();
			cancleDefaulAddressEb.setCommand("cancleDefaulAddressById");
			cancleDefaulAddressEb.setAdjustCode(pb.getAdjustCode());
			cancleDefaulAddressEb.setAppId(pb.getAppId());
			cancleDefaulAddressEb.setHead("mbrId", mbrId);
			EngineBean cancleAddressResult=ServerCall.call(cancleDefaulAddressEb);
			int count = Integer.parseInt(String.valueOf( cancleAddressResult.getBody("result")));
			if(count>0){
				EngineBean addressBean = ServerCall.call(pb);
				return addressBean;
			}else{
				return cancleAddressResult;
			}
		}else{
			EngineBean addressBean = ServerCall.call(pb);
			return addressBean;
		}
		
	}

	/**
	 * 更新常用地址
	 * 
	 * @param deliveryAddress
	 * @return
	 */
	public EngineBean updateAddress(EngineBean pb) throws ExceptionAbstract {
		log.info("DeliverAddressService createAddress begin()...");
		AssertUtils.assertNull(pb, "EngineBean can't be null.");
		Long mbrId = CommonUtils
				.objectToLong((String) pb.getHead("mbrId"), -1L);
		Long addressId=CommonUtils.objectToLong((String) pb.getHead("addressId"), -1L);
		String receiveName = (String) pb.getHead("receiveName");
		String province = (String) pb.getHead("province");
		String city = (String) pb.getHead("city");
		String district = (String) pb.getHead("district");
		String detailAddr = (String) pb.getHead("detailAddr");
		// String postalCode=(String)pb.getHead("postalCode");
		// String status=(String)pb.getHead("status");
		String defaultAddr=(String)pb.getHead("defaultAddr");
		// String createBy=(String)pb.getHead("createBy");
		String updateBy = (String) pb.getHead("updateBy");
		String mobileNo = (String) pb.getHead("mobileNo");
		String linkPhoneNo = (String) pb.getHead("linkPhoneNo");
		//String addrType=(String)pb.getHead("addrType");
		String aToken = (String) pb.getHead("aToken");
		if (-1L == mbrId) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"mbrId不能为空或非法数字");
		}
		if (-1L == addressId) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"addressId不能为空或非法数字");
		}
		if (CommonUtils.isBlank(receiveName)) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"receiveName不能为空");
		}
		if (CommonUtils.isBlank(province)) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"province不能为空");
		}
		if (CommonUtils.isBlank(city)) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"city不能为空");
		}
		if (CommonUtils.isBlank(district)) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"district不能为空");
		}
		if (CommonUtils.isBlank(detailAddr)) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"detailAddr不能为空");
		}
		if (CommonUtils.isBlank(defaultAddr)) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"defaultAddr不能为空");
		}
		if (CommonUtils.isBlank(mobileNo) && CommonUtils.isBlank(linkPhoneNo)) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"mobileNo和linkPhoneNo不能同时为空");
		}
		if (CommonUtils.isBlank(aToken)) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"aToken不能为空");
		}
		if (CommonUtils.isBlank(updateBy)) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"updateBy不能为空");
		}
		// 1.判断aToken是否存在 false:返回lToken错误
		if (!RedisUtils.exists(aToken)) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"缓存中不存在该aToken");
		}
		// 2.根据aToken获取缓存中的value 判断和userId是否相等,如果不等,则返回错误
		if (!updateBy.equals(RedisUtils.get(aToken))) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"aToken和updateBy不匹配");
		}
		//如果修改地址的时候，需要设置当前地址为默认地址，则需要取消原来的默认地址
		if(defaultAddr.equals("1")){
			EngineBean cancleDefaulAddressEb=new EngineBean();
			cancleDefaulAddressEb.setCommand("cancleDefaulAddressById");
			cancleDefaulAddressEb.setAdjustCode(pb.getAdjustCode());
			cancleDefaulAddressEb.setAppId(pb.getAppId());
			cancleDefaulAddressEb.setHead("mbrId", mbrId);
			EngineBean cancleAddressResult=ServerCall.call(cancleDefaulAddressEb);
			int count = Integer.parseInt(String.valueOf( cancleAddressResult.getBody("result")));
			if(count>0){
				EngineBean addressBean = ServerCall.call(pb);
				return addressBean;
			}else{
				return cancleAddressResult;
			}
		}else{
			EngineBean addressBean = ServerCall.call(pb);
			return addressBean;
		}
	}

	/**
	 * 根据常用地址id列表删除记录
	 * 
	 * @return
	 */
	public EngineBean deleteAddressById(EngineBean pb) throws ExceptionAbstract {
		log.info("DeliverAddressService createAddress begin()...");
		AssertUtils.assertNull(pb, "EngineBean can't be null.");
		String userId = (String) pb.getHead("userId");
		String aToken = (String) pb.getHead("aToken");
		JSONArray jsonArray=(JSONArray) pb.getHead("ids");
		JSONObject json;
		Long id;
		List<Long> ids=new ArrayList<Long>();
		if(jsonArray.size()<=0){
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"ids不能为空");
		}
		if (CommonUtils.isBlank(userId)) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"userId不能为空");
		}
		for(int i=0;i<jsonArray.size();i++){
			json=(JSONObject) jsonArray.get(i);
			id=json.getLong("id");
			ids.add(id);
		}
		pb.setHead("ids", ids);
		// 1.判断aToken是否存在 false:返回lToken错误
		if (!RedisUtils.exists(aToken)) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"缓存中不存在该aToken");
		}
		// 2.根据aToken获取缓存中的value 判断和userId是否相等,如果不等,则返回错误
		if (!userId.equals(RedisUtils.get(aToken))) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"aToken和userId不匹配");
		}
		EngineBean addressBean = ServerCall.call(pb);
		return addressBean;
	}

	/**
	 * 根据会员id设置默认使用地址
	 */
	public EngineBean setDefaulAddressById(EngineBean pb)
			throws ExceptionAbstract {
		log.info("DeliverAddressService createAddress begin()...");
		AssertUtils.assertNull(pb, "EngineBean can't be null.");
		String userId = (String) pb.getHead("userId");
		String aToken = (String) pb.getHead("aToken");
		String addressId = (String) pb.getHead("addressId");
		Long mbrId = CommonUtils
				.objectToLong((String) pb.getHead("mbrId"), -1L);
		if (-1L == mbrId) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"mbrId不能为空或非法数字");
		}
		if (CommonUtils.isBlank(addressId)) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"addressId不能为空");
		}
		if (CommonUtils.isBlank(userId)) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"userId不能为空");
		}
		// 1.判断aToken是否存在 false:返回lToken错误
		if (!RedisUtils.exists(aToken)) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"缓存中不存在该aToken");
		}
		// 2.根据aToken获取缓存中的value 判断和userId是否相等,如果不等,则返回错误
		if (!userId.equals(RedisUtils.get(aToken))) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"aToken和userId不匹配");
		}
		EngineBean addressBean = ServerCall.call(pb);
		return addressBean;
	}

	/**
	 * 根据会员Id取消默认地址
	 */
	public EngineBean cancleDefaulAddressById(EngineBean pb)
			throws ExceptionAbstract {
		log.info("DeliverAddressService createAddress begin()...");
		AssertUtils.assertNull(pb, "EngineBean can't be null.");
		String userId = (String) pb.getHead("userId");
		String aToken = (String) pb.getHead("aToken");
		Long mbrId = CommonUtils
				.objectToLong((String) pb.getHead("mbrId"), -1L);
		if (-1L == mbrId) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"mbrId不能为空或非法数字");
		}
		if (CommonUtils.isBlank(userId)) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"userId不能为空");
		}
		// 1.判断aToken是否存在 false:返回lToken错误
		if (!RedisUtils.exists(aToken)) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"缓存中不存在该aToken");
		}
		// 2.根据aToken获取缓存中的value 判断和userId是否相等,如果不等,则返回错误
		if (!userId.equals(RedisUtils.get(aToken))) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"aToken和userId不匹配");
		}
		EngineBean addressBean = ServerCall.call(pb);
		return addressBean;
	}

	/**
	 * 根据地址id获取地址信息
	 * 
	 * @param addressId
	 * @return
	 */
	public EngineBean getAddressByAddressId(EngineBean pb)
			throws ExceptionAbstract {
		log.info("DeliverAddressService createAddress begin()...");
		AssertUtils.assertNull(pb, "EngineBean can't be null.");
		String userId = (String) pb.getHead("userId");
		String aToken = (String) pb.getHead("aToken");
		String addressId = (String) pb.getHead("addressId");
		if (CommonUtils.isBlank(addressId)) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"addressId不能为空");
		}
		if (CommonUtils.isBlank(userId)) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"userId不能为空");
		}
		// 1.判断aToken是否存在 false:返回lToken错误
		if (!RedisUtils.exists(aToken)) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"缓存中不存在该aToken");
		}
		// 2.根据aToken获取缓存中的value 判断和userId是否相等,如果不等,则返回错误
		if (!userId.equals(RedisUtils.get(aToken))) {
			return ErrorUtils.error(pb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
					"aToken和userId不匹配");
		}
		EngineBean addressBean = ServerCall.call(pb);
		return addressBean;
	}

}
