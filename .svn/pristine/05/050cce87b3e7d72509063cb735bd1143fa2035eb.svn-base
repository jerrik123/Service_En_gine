package com.mangocity.mbr.init;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;

import com.mangocity.ce.bean.EngineBean;
import com.mangocity.ce.exception.ExceptionAbstract;
import com.mangocity.ce.util.CommonUtils;
import com.mangocity.ce.util.RedisUtils;
import com.mangocity.ce.web.prosess.ServerRequestProcess;
import com.mangocity.mbr.book.ErrorCode;
import com.mangocity.mbr.util.ErrorUtils;
import com.mangocity.mbr.util.SafeUtil;

/**
 * @Package com.mangocity.mbr.init
 * @Description : Url核心拦截过滤器
 * @author YangJie
 * @email <a href='yangjie_software@163.com'>yangjie</a>
 * @date 2015-8-12
 */
public class UrlInterceptionFilter extends FrameworkFilter {
	private static final Logger log = Logger
			.getLogger(UrlInterceptionFilter.class);

	protected void doDispatcher(HttpServletRequest request,
			HttpServletResponse response) {
		ServerRequestProcess reqProcess = ServerRequestProcess.getInstance();
		// 应用权限校验
		// 微信appid wx17688f0881ac9513
		// 微信appkey 9aa273cf91a929ee6b59e1c584e88a98
		// redis取
		String[] strs = { "isBindedMango", "mbrRegister",
				"queryMbrShipListByMbrid", "resetPassword", "sendSms",
				"thirdpartyBinding", "validateSms",
				"validateUniqueMbrByLoginName", "queryEnabledPoint",
				"queryPointTransaction", "queryAllCashAccountTrans",
				"queryCashAccountBalance", "queryNotUsedVoucher",
				"queryUsedVoucher", "queryVoucherBalanceByCd" };
		Map adjustMap = new HashMap();
		for (int i = 0; i < strs.length; i++) {
			adjustMap.put(
					SafeUtil.MD5(SafeUtil.MD5("wx17688f0881ac9513" + strs[i])
							+ "9aa273cf91a929ee6b59e1c584e88a98"),
					"wx17688f0881ac9513");
		}
		EngineBean eb = new EngineBean();
		try {
			eb.setRequest(request);
			eb.setResponse(response);
			//针对入参非正确json格式的处理方式
			try {
				reqProcess.setCharacterEncoding(eb);
				reqProcess.transformRequestParam(eb);
			} catch (ExceptionAbstract e) {
				eb.setResultCode(e.getErrorCode());
				eb.setResultMsg(e.getErrorMsg());
				reqProcess.responseProcess(eb, response);
				return;
			}
			Object obj = null;
			// 应用权限校验
			if (CommonUtils.isBlank(eb.getAdjustCode())) {
				// adjustcode必填
				obj = ErrorUtils
						.error(eb, ErrorCode.ERROR_REQUEST_PARAM_INVALID,
								"adjustCode不能为空");
				System.out.println("adjustCode不能为空");
			} else if (CommonUtils.isBlank(eb.getAppId())) {
				// appid必填
				obj = ErrorUtils.error(eb,
						ErrorCode.ERROR_REQUEST_PARAM_INVALID,
						"appId不能为空");
				System.out.println("appId不能为空");
			} else if (!isValidateSuccess(eb)/*!isValidatedSucc(adjustMap, eb)*/) {
				obj = ErrorUtils.error(eb,
						ErrorCode.ERROR_REQUEST_PARAM_INVALID,
						"校验失败,请输入正确的appId和adjustCode");
				log.info("校验adjustCode和appId不通过...");
			} else {
				// reqProcess.validatonProcess(bean);
				log.info("appId: " + eb.getAppId() + " ,adjustCode: " + eb.getAdjustCode() + " ,请求服务: " + eb.getCommand());
				obj = reqProcess.distribution(eb);
			}
			// eb.setBodyMap((Map)obj);
			reqProcess.responseProcess(obj, response);
		} catch (ExceptionAbstract e) {
			log.error(e.getMessage(), e);
		} catch (IOException e) {
			log.error(e.getMessage(), e);
		}
	}
	//null == adjustMap.get(eb.getAdjustCode())||!eb.getAppId().equals(adjustMap.get(eb.getAdjustCode()))
/*	private boolean isValidatedSucc(Map adjustMap,EngineBean eb){
		String adjustCode = eb.getAdjustCode();
		String appId = eb.getAppId();
		String command = eb.getCommand();
		String localAdjustCode = SafeUtil.MD5(SafeUtil.MD5(appId + command)+"9aa273cf91a929ee6b59e1c584e88a98");
		if(CommonUtils.isNotBlank(localAdjustCode) && localAdjustCode.equals(adjustCode)){
			return true;
		}
		return false;
	}*/

	/**
	 * 校验接口的合法性
	 * @param eb  redis key:adjustCode_XXX  value: appId|method|level
	 * @return
	 */
	private boolean isValidateSuccess(EngineBean eb) {
		StringBuffer sb  = new StringBuffer("adjustCode_");
		String adjustCode = sb.append(eb.getAdjustCode()).toString();
		String appId = eb.getAppId();
		String methodAuthLimit = null;
		String cacheValue = RedisUtils.get(adjustCode);//取出appid和等级
		//1.判断缓存是否存在该key
		if(!RedisUtils.exists(adjustCode)) {
			log.info("缓存中不存在该adjustCode: " + adjustCode);
			return false;
		}
		
		if(CommonUtils.isBlank(cacheValue)){
			log.info("redis中key="+adjustCode+" ,对应的value为空");
			return false;
		}
		String[] splitCacheStr = cacheValue.split("\\|");
		
		if(splitCacheStr.length!=3){
			log.info("redis中的adjustCode_*对应的value不是按XX|XX|的规则来存储: " + cacheValue);
			return false;
		}
		//2.判断缓存中的value和appId是否相等
		if(!appId.equals(splitCacheStr[0])){
			log.info("缓存中appId和传入appId不相同");
			 return false;
		}
		//3.判断调用的接口是否和redis中adjustCode_*对应的method相同
		if(null != eb.getCommand() && !eb.getCommand().equals(splitCacheStr[1])){
			log.info("缓存中method和command不相同");
			 return false;
		}
		
		methodAuthLimit = splitCacheStr[2];
		log.info("接口认证权限: " + methodAuthLimit);
		//将接口调用的等级传入
		eb.setHead("methodAuthLimit",methodAuthLimit);
		return true;
	}
}
